version: "2.3"
volumes:
  confluence-data:
  confluence-postgres:
  confluence-data-backups:
  confluence-postgres-backups:

services:
  postgres:
    # Image tag (replace with yours)
    image: postgres:11.11
    volumes:
      - confluence-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: confluencedb
      # Database user (replace with yours)
      POSTGRES_USER: postgres
      # Database password (replace with yours)
      POSTGRES_PASSWORD: servicemode
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      carbon:

  confluence:
    # Image tag (replace with yours)
    image: atlassian/confluence-server:7.12
    volumes:
      - confluence-data:/var/atlassian/application-data/confluence
    environment:
      # Application memory (replace with yours)
      JVM_MINIMUM_MEMORY: 8G
      JVM_MAXIMUM_MEMORY: 8G
      # Confluence URL (replace with yours)
      ATL_PROXY_NAME: ${DOMAIN}
      ATL_PROXY_PORT: 443
      ATL_TOMCAT_SCHEME: https
      ATL_TOMCAT_SECURE: 'true'
      # опция для сброса пароля администратора
      #JVM_SUPPORT_RECOMMENDED_ARGS: "-Datlassian.recovery.password=servicemode"
    ports:
      - "8091:8091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      # Confluence URL (replace with yours)
      - "traefik.http.routers.${TRAEFIK_PREFIX}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${TRAEFIK_PREFIX}.service=${TRAEFIK_PREFIX}"
      - "traefik.http.routers.${TRAEFIK_PREFIX}.entrypoints=https"
      - "traefik.http.services.${TRAEFIK_PREFIX}.loadbalancer.server.port=8090"
      - "traefik.http.routers.${TRAEFIK_PREFIX}.tls=true"
      - "traefik.http.services.${TRAEFIK_PREFIX}.loadbalancer.passhostheader=true"
      - "traefik.http.routers.${TRAEFIK_PREFIX}.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
    restart: unless-stopped
    networks:
      carbon:
    depends_on:
      postgres:
        condition: service_healthy

  backups:
    # Image tag (replace with yours)
    image: postgres:11.11
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/confluence-postgres/backups -type f -mtime +7 | xargs rm -f

    # Application data backups prune interval (replace with yours). Default is 7 days.
    # find /srv/confluence-application-data/backups -type f -mtime +7 | xargs rm -f

    # Confluence backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run confluence-restore-application-data.sh to restore application data if needed.
    # Run confluence-restore-database.sh to restore database if needed.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(echo $$POSTGRES_PASSWORD)"
             pg_dump
             -h postgres
             -p 5432
             -d confluencedb
             -U postgres | gzip > /srv/confluence-postgres/backups/confluence-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && tar -zcpf /srv/confluence-application-data/backups/confluence-application-data-backup-$$(date "+%Y-%m-%d_%H-%M").tar.gz /var/atlassian/application-data/confluence
             && find /srv/confluence-postgres/backups -type f -mtime +7 | xargs rm -f
             && find /srv/confluence-application-data/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - confluence-data:/var/atlassian/application-data/confluence
      # Application data backups location
      - confluence-data-backups:/srv/confluence-application-data/backups
      # Database backups location
      - confluence-postgres-backups:/srv/confluence-postgres/backups
    environment:
      # Database password (replace with yours)
      POSTGRES_PASSWORD: servicemode
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      confluence:
        condition: service_healthy
networks:
  carbon:
    external: true
